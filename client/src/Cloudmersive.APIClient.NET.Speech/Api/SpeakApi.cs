/* 
 * speechapi
 *
 * Speech APIs enable you to recognize speech and convert it to text using advanced machine learning, and also to convert text to speech.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Speech.Client;
using Cloudmersive.APIClient.NET.Speech.Model;

namespace Cloudmersive.APIClient.NET.Speech.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpeakApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>Object</returns>
        Object SpeakPost (string format, string text);

        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SpeakPostWithHttpInfo (string format, string text);
        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>Object</returns>
        Object SpeakTextToSpeech (TextToSpeechRequest reqConfig);

        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SpeakTextToSpeechWithHttpInfo (TextToSpeechRequest reqConfig);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SpeakPostAsync (string format, string text);

        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SpeakPostAsyncWithHttpInfo (string format, string text);
        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SpeakTextToSpeechAsync (TextToSpeechRequest reqConfig);

        /// <summary>
        /// Perform text-to-speech on a string
        /// </summary>
        /// <remarks>
        /// Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SpeakTextToSpeechAsyncWithHttpInfo (TextToSpeechRequest reqConfig);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpeakApi : ISpeakApi
    {
        private Cloudmersive.APIClient.NET.Speech.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeakApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpeakApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Speech.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Speech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeakApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpeakApi(Cloudmersive.APIClient.NET.Speech.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Speech.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Speech.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Speech.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Speech.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>Object</returns>
        public Object SpeakPost (string format, string text)
        {
             ApiResponse<Object> localVarResponse = SpeakPostWithHttpInfo(format, text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SpeakPostWithHttpInfo (string format, string text)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SpeakApi->SpeakPost");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SpeakApi->SpeakPost");

            var localVarPath = "/speech/speak/text/basicVoice/{format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (text != null && text.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(text); // http body (model) parameter
            }
            else
            {
                localVarPostBody = text; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeakPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SpeakPostAsync (string format, string text)
        {
             ApiResponse<Object> localVarResponse = await SpeakPostAsyncWithHttpInfo(format, text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">File format to generate response in; possible values are \&quot;mp3\&quot; or \&quot;wav\&quot;</param>
        /// <param name="text">The text you would like to conver to speech.  Be sure to surround with quotes, e.g. \&quot;The quick brown fox jumps over the lazy dog.\&quot;</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SpeakPostAsyncWithHttpInfo (string format, string text)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SpeakApi->SpeakPost");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SpeakApi->SpeakPost");

            var localVarPath = "/speech/speak/text/basicVoice/{format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (text != null && text.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(text); // http body (model) parameter
            }
            else
            {
                localVarPostBody = text; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeakPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>Object</returns>
        public Object SpeakTextToSpeech (TextToSpeechRequest reqConfig)
        {
             ApiResponse<Object> localVarResponse = SpeakTextToSpeechWithHttpInfo(reqConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SpeakTextToSpeechWithHttpInfo (TextToSpeechRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling SpeakApi->SpeakTextToSpeech");

            var localVarPath = "/speech/speak/text/voice/basic/audio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeakTextToSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SpeakTextToSpeechAsync (TextToSpeechRequest reqConfig)
        {
             ApiResponse<Object> localVarResponse = await SpeakTextToSpeechAsyncWithHttpInfo(reqConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform text-to-speech on a string Takes as input a string and a file format (mp3 or wav) and outputs a wave form in the appropriate format.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Speech.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reqConfig">String input request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SpeakTextToSpeechAsyncWithHttpInfo (TextToSpeechRequest reqConfig)
        {
            // verify the required parameter 'reqConfig' is set
            if (reqConfig == null)
                throw new ApiException(400, "Missing required parameter 'reqConfig' when calling SpeakApi->SpeakTextToSpeech");

            var localVarPath = "/speech/speak/text/voice/basic/audio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reqConfig != null && reqConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reqConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reqConfig; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeakTextToSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
